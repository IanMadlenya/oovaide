# Generated by oovCMaker
cmake_minimum_required(VERSION 2.8)
project(oovcde)
INCLUDE(FindPkgConfig)

set(OOVCDE_MAJOR_VERION 0)
set(OOVCDE_MINOR_VERION 1)
set(OOVCDE_PATCH_VERION 0)
set(OOVCDE_VERION
${OOVCDE_MAJOR_VERSION}.${OOVCDE_MINOR_VERSION}.${OOVCDE_PATCH_VERSION})

# Offer the user the choice of overriding the installation directories
set(INSTALL_LIB_DIR lib CACHE PATH "Installation directory for libraries")
set(INSTALL_BIN_DIR bin CACHE PATH "Installation directory for executables")
set(INSTALL_INCLUDE_DIR include CACHE PATH
   "Installation directory for header files")
if(WIN32 AND NOT CYGWIN)
   set(DEF_INSTALL_CMAKE_DIR CMake)
else()
   set(DEF_INSTALL_CMAKE_DIR lib/CMake/oovcde)
endif()
set(INSTALL_CMAKE_DIR ${DEF_INSTALL_CMAKE_DIR} CACHE PATH
   "Installation directory for CMake files")

# Make relative paths absolute (needed later on)
foreach(p LIB BIN INCLUDE CMAKE)
   set(var INSTALL_${p}_DIR)
   if(NOT IS_ABSOLUTE "${${var}}")
      set(${var} "${CMAKE_INSTALL_PREFIX}/${${var}}")
   endif()
endforeach()

# Add debug and release flags
# Use from the command line with -DCMAKE_BUILD_TYPE=Release or Debug
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -Wall")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -Wall")
# External Packages
if(NOT WIN32)
# GTK
pkg_check_modules(GTK REQUIRED gtk+-3.0)
include_directories(${GTK_INCLUDE_DIRS})
link_directories(${GTK_LIBRARY_DIRS})
add_definitions(${GTK_CFLAGS_OTHER})
endif()

# set up include directories
include_directories(
   "${PROJECT_SOURCE_DIR}/oovCommon"
   "${PROJECT_SOURCE_DIR}/oovGuiCommon"
   )
add_definitions(-std=c++11)

# Add sub directories
add_subdirectory(oovBuilder)
add_subdirectory(oovCMaker)
add_subdirectory(oovCommon)
add_subdirectory(oovCovInstr)
add_subdirectory(oovCppParser)
add_subdirectory(oovEdit)
add_subdirectory(oovGuiCommon)
add_subdirectory(oovcde)
# Add all targets to the build-tree export set
export(TARGETS  oovBuilder oovCMaker oovCommon oovCovInstr oovCppParser oovEdit oovGuiCommon oovcde
   FILE "${PROJECT_BINARY_DIR}/oovcdeTargets.cmake")

# Export the package for use from the build-tree
# (this registers the build-tree with a global CMake-registry)
export(PACKAGE oovcde)

# Create the oovcdeConfig.cmake and oovcdeConfigVersion files
file(RELATIVE_PATH REL_INCLUDE_DIR "${INSTALL_CMAKE_DIR}"
   "${INSTALL_INCLUDE_DIR}")
# for the build tree
set(CONF_INCLUDE_DIRS "${PROJECT_SOURCE_DIR}" "${PROJECT_BINARY_DIR}")
configure_file(oovcdeConfig.cmake.in
   "${PROJECT_BINARY_DIR}/oovcdeConfig.cmake" @ONLY)
# for the install tree
set(CONF_INCLUDE_DIRS "\${OOVCDE_CMAKE_DIR}/${REL_INCLUDE_DIR}")
configure_file(oovcdeConfig.cmake.in
   "${PROJECT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/oovcdeConfig.cmake" @ONLY)
# for both
configure_file(oovcdeConfigVersion.cmake.in
   "${PROJECT_BINARY_DIR}/oovcdeConfigVersion.cmake" @ONLY)

# Install the oovcdeConfig.cmake and oovcdeConfigVersion.cmake
install(FILES
   "${PROJECT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/oovcdeConfig.cmake"
   "${PROJECT_BINARY_DIR}/oovcdeConfigVersion.cmake"
DESTINATION "${INSTALL_CMAKE_DIR}" COMPONENT dev)

# Install the export set for use with the install-tree
install(EXPORT oovcdeTargets DESTINATION
   "${INSTALL_CMAKE_DIR}" COMPONENT dev)
