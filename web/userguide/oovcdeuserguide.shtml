<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html><head><!-- DC Blaha - 6/8/2009 -->




<link rel="stylesheet" type="text/css" href="../style.css">
<meta content="text/html; charset=ISO-8859-1" http-equiv="content-type"><title>Oovcde User Guide</title></head><body><div style="top: 8px; left: 8px;" class="content">

<font size="+3">Oovcde User Guide<br></font>
<hr style="width: 100%; height: 3px;">

Created: June 8, 2009
Last update: Sept 22, 2014
<p>
<img src="../description/OovLogo.png" style="height: 16mm; width: 30mm;">
</p><p>
</p>
<h1><a class="mozTocH2" name="mozTocId927306"></a>Contents</h1>

<ol id="mozToc"><!--mozToc h1 1 h2 2 h3 3 h4 4 h5 5 h6 6--><li><a href="#mozTocId927306">Contents</a></li><li><a href="#mozTocId937452">Quick Start

</a></li><li><a href="#mozTocId381773">Drawing Overview</a></li><li><a href="#mozTocId651087">Oovcde</a><ol><li><a href="#mozTocId728139">Working With Projects</a></li><li><a href="#mozTocId269360">Modifying Class Diagrams</a></li><li><a href="#mozTocId213642">Changing Class Diagram Display Options</a></li><li><a href="#mozTocId261032">Displaying Sequence Diagrams</a></li><li><a href="#mozTocId120758">Editing SVG diagrams</a></li></ol></li><li><a href="#mozTocId246966">Build System</a><ol><li><a href="#mozTocId418717">Build Goals</a></li><li><a href="#mozTocId102170">Build Features</a></li><li><a href="#mozTocId675000">Build Quick Start</a></li><li><a href="#mozTocId349590">Cross Compiling</a></li><li><a href="#mozTocId206848">Resolving Include Problems During Analysis


</a><ol><li><a href="#mozTocId824690">Windows Include Problems


</a></li></ol></li><li><a href="#mozTocId450611">Linux Example</a></li><li><a href="#mozTocId913463">Windows Example</a></li><li><a href="#mozTocId813985">Build Sequence</a></li><li><a href="#mozTocId932506">Project Limitations</a></li></ol></li><li><a href="#mozTocId21842">OovEdit</a></li></ol>
<br>
<h1><a class="mozTocH2" name="mozTocId937452"></a>Quick Start<br>

</h1>
To work with the examples, see <a href="examples.shtml">examples.shtml</a>.<br>
<br>

<ol>
  
  <li>Use File/New and create a new Oovcde project using an existing or
new C++ project. There are example source projects in trunk/examples.<br>
  </li>
  <ol>
<li>select a new directory for source files, or an existing directory that is the root directory of existing source files.</li><li>select an output project directory to store oov project files.</li>
  </ol>
<li>OR: Use File/Open and open the trunk/test/trunk-oovcde-win or trunk/test/trunk-oovcde-linux directory.<br>
</li><li>At
this point, it may be possible to view diagrams if the include paths
are set. They are already set if the oovcde project was opened. Select
Analysis/Settings and select the Cpp Arguments tab to change
the include paths and compile and link settings. Note that the include
and library paths can both be set using recursive searches using "-ER".
See below for more information.<br>
  </li>
  <li>Build
a project. These steps are not required for viewing diagrams. Building
Oovcde requires CLang and GTK to be downloaded and to match the paths
in the Analysis/Settings/Cpp Arguments settings.<br>
</li>
  <ol>
    <li>Select
Build/Settings and set the component type for each component. For the
Oovcde project, the oovCommon and oovGuiCommon components are static
libraries, and all other oov... components are executables.<br>
    </li>
    <li>Select Build/Build Debug to build a debug version of the project.<br>
  </li>
  </ol>

  
</ol>Building the Oovcde project under Windows also requires MinGW or
MinGW-builds. Note that once the path is set to these packages, the
compiler will find the includes and libraries automatically, and they
do not have to be specified.&nbsp; If they are specified, they may
cause duplicate definition or other types of errors. The MinGW-builds
package has the advantage over MinGW that std::thread is supported.
Switching between the packages requires nothing more than changing the
path environment variable.<br>

<h1><a class="mozTocH2" name="mozTocId381773"></a>Drawing Overview</h1>



So what are circles and V shapes doing on the drawings?  Don't
worry, they can be turned off if desired.  These extra Oov symbols are used to
provide quick visibility into other relations that are not displayed on
standard UML diagrams.  The goal is to find and show as many relationships
as possible on the diagram for quick understandability and verification of the code.
<p>
(See the screenshots to see examples.)  The enhanced symbols are:
    </p><ul>
    <li>the nested circles indicate the private, public, protected scope
	relations. Fully empty means public, and fully filled means private,
	otherwise it is protected.</li>
    <li>the V shape indicates read only (const)</li>
    <li>the circle standing alone means a relationship with a function variable</li>
    <li>a small circle next to a circle is a function parameter relationship.</li>
    </ul>
    The other symbols are standard UML symbols.

<h1><a class="mozTocH2" name="mozTocId651087"></a>Oovcde</h1>


<h2><a class="mozTocH3" name="mozTocId728139"></a>Working With Projects</h2>

    <ol>
    <li>Start the "oovcde" program</li>
    <li>Use File/New to create a new project</li>
    <li>An Open Directory dialog will appear that allows choosing the
	source root of the source files to analyze. The directory is
	recursively searched for all files with extensions of .cpp and .h.</li>
    <li>An Open directory dialog will appear that allows specifying a location
	for saving all of the project files for Oovcde.</li>
    <li>Select the Analysis/Settings menu item. Choose the "Cpp Arguments" tab
	to change the include paths and other compiler settings.  Errors during
	compilation are stored in the project directory.  If there are errors,
	change the compiler settings and reopen the project. For now, the
	Oovcde program may have to be restarted to completely clear the
	settings.  If the project is not compatible with Clang, it may be best
	to use the first version of Ooovcde since it used an older compiler.</li>
    </ol>
    To open a previously saved project, select File/Open and specify
	the previously saved OOvcde project directory.

<h2><a class="mozTocH3" name="mozTocId269360"></a>Modifying Class Diagrams</h2>

    <ol>
    <li>The classes for a project are displayed in the left pane.  Click on a
	class to display a diagram of related classes.</li>
    <li>Right clicking on a class will display a popup menu that allows
	adding classes with various types of relationships.</li>
    <li>Left click on a class and drag the cursor to the desired location to
	move a class.</li>
    </ol>
    Right clicking on a class also allows
	<ul>
	<li>Navigating to a different class (Called "Go To Class")</li>
	<li>viewing the source code (in Windows only)</li>
	<li>removing classes</li>
	</ul>

<h2><a class="mozTocH3" name="mozTocId213642"></a>Changing Class Diagram Display Options</h2>

    <ol>
    <li>Select the Analysis/Settings menu item.</li>
    <li>Choose the "Draw Options" tab and check or uncheck the various options.
	These options do not change how classes are added to the diagrams.</li>
    </ol>

<h2><a class="mozTocH3" name="mozTocId261032"></a>Displaying Sequence Diagrams</h2>

    <ol>
    <li>Selecting a class in the class list will change the operations in the
	Operations list. Clicking on an operation will display the sequence
	diagram for the operation.</li>
    </ol>
    Sequence diagrams are only slightly modified from standard UML diagrams.
    The guard conditions are not shown on each arrow, but are instead shown on the
    lifeline blocks.  This prevents duplication of the condition for each operation
    call, and is still very easy to read for someone that is used to UML.

<h2><a class="mozTocH3" name="mozTocId120758"></a>Editing SVG diagrams</h2>

    <ol>
    <li>Use File/Save or File/Save As to save an SVG file.  A class diagram
	will be saved if the class diagram is displayed, otherwise the sequence
	diagram will be saved.</li>
    <li>Download Inkscape from <a href="http://inkscape.org/">inkscape.org</a></li>
    </ol>
    When using File/Save, the file will be saved to the location of the executable
    files.  This may be changed in the future.

<h1><a class="mozTocH3" name="mozTocId246966"></a>Build System</h1>

The build system is not required to view diagrams.<br>
<br>
There must be a set of installed
	build tools such as clang or GNU. The oovBuilder manages the project
	source, and is an executable that can be run from the command line. It can
	be run from the build menu in the oovcde program.
	<br>
<h2><a class="mozTocH3" name="mozTocId418717"></a>Build Goals</h2>

<ul>
  <li>Provide the simplest setup for building projects</li>
  <li>Eliminate reasons for "clean". Never any out of date dependencies</li>
  <li>Source directories are not cluttered up with build files.<br>
  </li>

  <li>Fast builds using multitasking.<br>
  </li>
</ul>
<br>
<h2><a class="mozTocH3" name="mozTocId102170"></a>Build Features</h2>


<ul>
  <li>Component names are derived from the directory names of directories that contain C++ source files.</li>
  <li>Directories are scanned to find header files, and generate include paths.</li>
  <li>Directories are scanned to find libraries, and library symbols
are parsed to determine library link order, and to determine which
static libraries are required for executables and shared libraries.<br>
  </li>
  <li>Source
files are parsed using CLang to find include dependencies. Include dependencies are
used to determine which files need to be built. Rebuilding will only
compile files that need to be rebuilt based on dependencies.</li>

  <li>External packages can be specified by selecting the package, or
the root path of external projects can be specified for
locations of header and library files. On Linux, the pkg-config system
is used to find available packages. Exclusion criteria can be used
to select only one of many types of library or header files.</li>
  <li>Build tools are determined from paths and installed tools, but can be specified manually.</li>

  <li>Project information is scanned and stored for different sets of
build arguments. Debug and release configurations will not conflict.</li>
  <li>Multitasking is used to analyze and build multiple object, library, executables files<br>
  </li>


</ul>
<br>

<h2><a class="mozTocH3" name="mozTocId675000"></a>Build Quick Start</h2>
The examples are a quick way to understand some basic principles. See <a href="examples.shtml">Examples</a>.<br>
The build details are described in <a href="../design/OovcdeBuildDesign.html">Oovcde Build Design</a>.<br>
Note that the Oovcde binary packages do not include a compiler for building.<br>
<br>
The following steps can be followed:<br>
<br>
<ul>
  <li>Run Oovcde and either create a new project, or open an existing project.</li>
  <li>Add some external project packages. These are specified
	under Analysis/Settings/Cpp Arguments</li>
  <ul>
    <li>In Linux, this uses pkg-confg, and will define all includes, flags and libraries<br>
    </li>
  </ul>

  <li>If the required external packages do not exist, either custom packages can
be created, or add some external project root references. These are
specified under Analysis/Settings/Cpp Arguments, and may look like
"-ERC:\ExternalPackage", although some may already be set up. The full syntax
allows excluding strings using an exclamation point as a not symbol.
This is required for cases where external project references contain
multiple libraries with the same symbols. For example,
"-ER/home/dave/software/oovcde/2.0/clang+llvm-3.2!libclang_rt" will
prevent using any path with libclang_rt in it.</li>

  <li>Select Build/Settings and specify what type of output to produce
	for each component listed in the dialog. If the needed components are not
	listed, then Oovcde will not build your type of project. Either
	rearrange the directory structure, or contact the Oovcde developers.<br>
  </li>
  <li>Run Build/Build Debug or Build/Build Release.<br>
  </li>
</ul>The trunk/test/trunk-oovcde directorys show example files for
building the oovcde project. This is a somewhat complex project since
it uses both Gtk and Clang, and has multiple libraries and executables.
Early versions of CLang on Windows required building CLang, and the
complex library order for
Clang was able to be determined by the build system.<br>
<br>
<h2><a class="mozTocH4" name="mozTocId349590"></a>Cross Compiling</h2>

The following example shows the use of Ubuntu for cross compiling to an
ARM hard float platform. This requires that the gcc-arm-linux-gnueabihf
package is installed using apt-get or synaptic:<br>
<ul>
  <li>Select Analysis/Settings</li>
  <li>Select Debug under Build Configurations, and click the NewConfig button. Enter "Arm-Debug" as a new configuration.<br>
</li>
  <li>Enter arm-linux-gnueabihf-g++ for the Compiler Path</li>
  <li>Add to the Common Build Arguments:</li>
  <ul>
    <li>-fPIC</li>
    <li>-march=armv7-a</li>
    <li>-mfloat-abi=hard</li>
  </ul>
  <li>Add something like the fillowing to the Extra Build Arguments for the Arm-Debug configuration:</li>
  <ul>
    <li>-lnk-L/target-sysroot/arm-linux-gnueabihf/usr/lib</li>
    <li>-lnk-L/target-sysroot/arm-linux-gnueabihf/lib</li>
    <li>-lnk-Wl,-rpath-link,/target-sysroot/arm-linux-gnueabihf/usr/lib</li>
    <li>-lnk-Wl,-rpath-link,/target-sysroot/arm-linux-gnueabihf/lib</li>


  </ul>
  <li>When compiling, the linker may say, "cannot find", and then list
some library name. If the target files were copied from the device, the
links may contain paths to the directories for the target machine. This
files can be edited and the paths removed so that the local files are
found.If shared libraries are created, there may be some cases where a static
library can be hidden by being renamed to force the shared library to
be used.
  </li>


</ul>
<br>

<h2><a class="mozTocH4" name="mozTocId206848"></a>Resolving Include Problems During Analysis<br>


</h2>

The Oovcde analysis will often produce usable output even when include files cannot
be found, although this may result in missing classes, or methods in
sequence diagrams.<br>

<br>
Oovcde uses the OovCppParser to perform the analysis, and the
OovCppParser uses CLang. Clang has hard coded paths compiled into the
library. Compilers will only search for a certain set of include paths.
If the compiler cannot find a standard library file, then it isn't
finding the file in its include directories. To view the CLang or GCC
compiler
include paths, use the -v option in the Oovcde Analysis/Settings/Build
Arguments.<br>
<br>Oovcde produces analysis directories for each set of build
arguments.&nbsp; This is in case the classes may be different for debug
or release, etc.<br>
The analysis directories are not kept unique for the clang
and GCC compilers. Build argument differences are used to make unique analysis
directories. If they are using the same directory, and different include paths are needed, set an argument that
is different so that different analysis directories are used.<br>
<br>
<h3><a class="mozTocH5" name="mozTocId824690"></a>Windows Include Problems<br>


</h3>

Things can be difficult especially on Windows since Oovcde by
default
uses CLang&nbsp; for analysis, and either MinGW-builds or MinGW is used
for a build. MinGW-builds is required to build Oovcde with proper
threading support.<br>
<br>
So there are two usage scenarios:<br>
<ul>
  <li>Perform Analysis with Oovcde - Typically CLang will require include files to be in \MinGW.<br>
  </li>
  <li>Build Oovcde - Use MinGW-Builds by setting the path to the bin
directory, and temporarily hide the \MinGW directory by renaming it to
\MinGW-hide<br>
  </li>
</ul>


<br>
The typical location is in the \MinGW directory. CLang supports the
following MinGW installations on Windows.<br>
<br>
<table style="text-align: left; width: 679px; height: 120px;" border="1" cellpadding="2" cellspacing="2">
  <tbody>
    <tr>
      <td style="vertical-align: top;">CLang Version<br>
      </td>
      <td style="vertical-align: top;">MinGW Versions Supported<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;">CLang 3.4<br>
      </td>
      <td style="vertical-align: top;">4.5.0, 4.5.1, 4.5.2, 4.5.4, 4.6.0, 4.6.1, 4.6.2, 4.6.3, 4.7.0, 4.8.1<br>
      </td>
    </tr>
  </tbody>
</table>
<br>
<br>
<h2><a class="mozTocH4" name="mozTocId450611"></a>Linux Example</h2>

This
is an old Linux example. The best method currently is to load the
required packages in the Analysis/Settings/Build Arguments tab.<br>
For Linux, the following arguments work to build all Oovcde components with the CLang compiler.
These arguments
	will build the complete oovcde project on Linux when the component types
	are set in the components tab. This is how the arguments may look in the Analysis/Settings/Build Arguments dialog.<pre>	-c<br>	-std=c++0x<br>	-ER/usr/include/gtk-3.0<br>	-ER/usr/include/glib-2.0<br>	-I/usr/include/c++<br>	-ER/usr/include/cairo<br>	-ER/usr/include/pango-1.0<br>	-ER/usr/lib/x86_64-linux-gnu/glib-2.0<br>	-ER/usr/include/gdk-pixbuf-2.0<br>	-ER/usr/include/atk-1.0<br>	-ER/usr/lib/x86_64-linux-gnu!libmcheck!libieee<br>	-ER/home/dave/software/oovcde/2.0/clang+llvm-3.2!libclang_rt<br>	-lnk-static-libstdc++<br>	-lnk-Wl,-rpath=./<br>	-lnk-rdynamic<br>	</pre>
<h2><a class="mozTocH4" name="mozTocId913463"></a>Windows Example</h2>

This
is an old Windows example. The best method currently is to load the
required packages in the Analysis/Settings/Build Arguments tab. For
Windows, the following arguments work to build all Oovcde components
with the g++ compiler.<br>
<br>
Base Build Arguments
<pre>-c<br>-ERC:/Program Files/GTK+-Bundle-3.6.4<br>-IC:/Program Files/LLVM/include<br>-lnk-LC:/Program Files/LLVM/lib<br>-lnk-lpthread<br>-lnk-lpsapi<br>-lnk-limagehlp<br>-lnk-mwindows<br>-lnk-llibclang<br></pre>
<br>
Extra Analysis Arguments<br>
<pre>-x<br>c++<br>-std=c++11<br></pre>
Extra Debug Arguments<br>
<pre>-O0<br>-g3<br>-std=c++0x<br></pre>
Extra Release Arguments<br>
<pre>-O3<br>-g3<br>-std=c++0x<br></pre>
<br>
<br>
	For Windows, the arguments may look something like this when compiling with clang++ 3.2.
	The only problem is that clang 3.2 does not export symbols in the object files, so
	the link with GTK fails.
<pre>	-c<br>	-std=c++0x<br>	-ERC:\Program Files\GTK+-Bundle-3.6.1<br>	-ERC:\Dave\Mine\software\oovcde\clang+llvm-3.2<br></pre>
<h2><a class="mozTocH4" name="mozTocId813985"></a>Build Sequence</h2>


The detailed sequence of the build is:
	<ul>
	<li>The user specifies the source root directory and output oovcde project
	directory. The build system scans the source root directory for include and source
	files. Each directory with source files is considered a component. Each
	directory with include files is added to the initial include paths.</li>

	
  <li>The program tries to determine the compiler and other build tools.
		<ul><li>On Windows, the path is searched for clang, otherwise the
		build tools default to the GNU tools. (g++, ar, etc.)
		The llvm-ar tool is not used on Windows since it does not work.</li><li>On Linux, the path is checked for /usr/bin/clang++, and if
		not present, the build tools default to the GNU tools.
		</li><li>Manually edit oovcde.txt to change build tools.</li></ul>

	</li><li>The
user specifies additional external project packages or package roots
for includes and libraries. If include files are found, the paths are
added to the initial include paths. If libraries are found, the paths
are added to the initial library paths. The user must specify the
project packages in the correct order. Include paths are scanned in the
order that packages and external
references are specified. During the link, the libraries are scanned in
opposite order. Project package order is determined by the builder.</li>

	<li>The program parses the source files for include dependencies using
	the initial include paths.
	The include dependencies are optimized so only needed include
	paths are used to detect dependencies for each component.</li>

	<li>The program generates a list of components that could be built.</li>

	<li>The user specifies the type of component such as static library,
	shared library or program.</li>

	<li>The user can start a build.</li><li>The dependencies of external project libraries are determined to
	create libraries in the correct order for the linker. The external
	project libraries are used in the opposite order that the external
	project roots were specified.
	The library dependencies are optimizes so only needed libraries
	are used for each component.
	</li>

	<li>Only out of date targets are built.</li>
	</ul>
<h2><a class="mozTocH4" name="mozTocId932506"></a>Project Limitations</h2>

There
are some limitations on projects. The basic rule is that a directory
can be defined as a component and all source files that are contained
in that directory or other child directories of that directory will be
used to build the component. The include files can be in any directory,
and will be found automatically.<br>
<br>
If multiple directories are used to build a component that are not under one directory, it is possible to create many
static libraries. Oovcde will determine static library link order
automatically.<br>
<br>
The following shows a typical project that can be
supported. <br>
<br>Root directory of project source code<br>
<pre>  Sub-directory1 - Component1<br>      *.cpp - All of these files are used for Component1<br>      *.h - These can be used by any component<br><br>  Sub-directory2<br>      *.h - These can be used by any component<br><br>  Sub-directory3<br>      Sub-directory4 - Component2<br>          *.cpp - These can only be used for Component2<br>          *.h - These can be used by any component<br><br>  Sub-directory5 - Component3<br>      Sub-directory6<br>          *.cpp - These can be used for Component3<br><br>  Sub-directory7<br>          *.cpp - These can be used for Component3<br></pre>
<br>
There are also these limitations.<br>

	<ul>
	<li>Only GNU or clang projects. CLang support for MSVC projects is improving, but unknown.<br>
</li>
	
	<li>External project roots are expected that they will not be changed. In
	order to update library information, delete the out/sym files.</li>
	<li>The component names will be created from the directory names.</li>
	<li>Some duplicate filenames (includes) may cause problems for determining
	dependencies. Circular dependencies may cause problems. These may be
	able to be resolved:
		<ul><li>View oovcde-incdep.txt to see include directory dependencies
		found by compiler</li>
		</ul>
	</li>
	<li>Only C++ is compiled. (No .C or .ASM) Other types of files must be put into external
	objects or libraries.</li>
	</ul>There are some problems using llvm/clang 3.2 on Windows or Linux. The build tool 
	will attempt to use tools that are known to work. CLang 3.4 may not have these problems.<br>
<ul>
  <li>Symbols are not exported. This appears to be a compile time (clang++) problem.</li>
  <li>The llvm-ar tool will cause a link error</li>
  <li>The llvm-nm tool has no output on Linux, and gives a bad file error on Windows.</li>
</ul><br>
<h1><a class="mozTocH2" name="mozTocId21842"></a>OovEdit</h1>

The OovEdit program is a simple text editor. It has the following features.<br>
<ol>
  <li> C++ syntax highlighting using CLang</li>
  <li>Debugging using GDB<br>
  </li>
  <li>Find/Replace</li>
  <li>Find in files<br>
  </li>

  <li>Undo/Redo</li>
  <li>Copy/Paste</li>
  <li>Find forward or reverse, and case sensitive or insensitive<br>
  </li>

</ol>
<br>
<br>




</div>
</body></html>